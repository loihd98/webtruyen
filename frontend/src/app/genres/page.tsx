"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import StorySidebar from "../../components/layout/StorySidebar";
import Layout from "@/components/layout/Layout";

interface Genre {
  id: string;
  name: string;
  slug: string;
  _count: {
    stories: number;
  };
}

export default function GenresPage() {
  const router = useRouter();
  const [genres, setGenres] = useState<Genre[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [sortBy, setSortBy] = useState<"name" | "count">("name");

  useEffect(() => {
    fetchGenres();
  }, []);

  const fetchGenres = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch("/api/stories/genres");
      if (!response.ok) {
        throw new Error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch th·ªÉ lo·∫°i");
      }

      const data = await response.json();
      setGenres(data.genres || []);
    } catch (error) {
      console.error("Error fetching genres:", error);
      setError("C√≥ l·ªói x·∫£y ra khi t·∫£i danh s√°ch th·ªÉ lo·∫°i");
    } finally {
      setLoading(false);
    }
  };

  const getGenreDescription = (genreName: string) => {
    const descriptions: { [key: string]: string } = {
      "Ti√™n Hi·ªáp":
        "Tu ti√™n, tu ch√¢n, tu th·∫ßn, c√°c c√¢u chuy·ªán v·ªÅ vi·ªác tu luy·ªán ƒë·ªÉ tr·ªü th√†nh ti√™n nh√¢n.",
      "ƒê√¥ Th·ªã":
        "C√¢u chuy·ªán hi·ªán ƒë·∫°i, ƒë·ªùi s·ªëng th√†nh th·ªã, t√¨nh y√™u v√† s·ª± nghi·ªáp trong x√£ h·ªôi hi·ªán t·∫°i.",
      "Huy·ªÅn Huy·ªÖn":
        "Th·∫ø gi·ªõi k·ª≥ ·∫£o, ph√©p thu·∫≠t, ma ph√°p v√† nh·ªØng cu·ªôc phi√™u l∆∞u kh√¥ng t∆∞·ªüng.",
      "Ki·∫øm Hi·ªáp":
        "V√µ l√¢m, giang h·ªì, ki·∫øm ph√°p v√† nh·ªØng c√¢u chuy·ªán anh h√πng h√†o ki·ªát.",
      "Ng√¥n T√¨nh":
        "T√¨nh y√™u l√£ng m·∫°n, c√¢u chuy·ªán t√¨nh c·∫£m ng·ªçt ng√†o v√† c·∫£m ƒë·ªông.",
      "Quan Tr∆∞·ªùng":
        "Ch√≠nh tr·ªã, quy·ªÅn l·ª±c, ƒë·∫•u tranh trong tri·ªÅu ƒë√¨nh v√† quan tr∆∞·ªùng.",
      "L·ªãch S·ª≠":
        "D·ª±a tr√™n s·ª± ki·ªán l·ªãch s·ª≠, nh√¢n v·∫≠t l·ªãch s·ª≠ v√† b·ªëi c·∫£nh th·ªùi ƒë·∫°i x∆∞a.",
      "Khoa Huy·ªÖn":
        "T∆∞∆°ng lai, c√¥ng ngh·ªá, v≈© tr·ª• v√† nh·ªØng c√¢u chuy·ªán vi·ªÖn t∆∞·ªüng.",
      "Trinh Th√°m": "Ph√° √°n, ƒëi·ªÅu tra, b√≠ ·∫©n v√† nh·ªØng c√¢u chuy·ªán h·ªìi h·ªôp.",
      "V√µng Du": "Game online, th·∫ø gi·ªõi ·∫£o v√† nh·ªØng cu·ªôc phi√™u l∆∞u trong game.",
    };
    return (
      descriptions[genreName] ||
      "Kh√°m ph√° nh·ªØng c√¢u chuy·ªán th√∫ v·ªã trong th·ªÉ lo·∫°i n√†y."
    );
  };

  const filteredAndSortedGenres = genres
    .filter((genre) =>
      genre.name.toLowerCase().includes(searchTerm.toLowerCase())
    )
    .sort((a, b) => {
      if (sortBy === "name") {
        return a.name.localeCompare(b.name, "vi");
      } else {
        return b._count.stories - a._count.stories;
      }
    });

  const popularGenres = genres
    .sort((a, b) => b._count.stories - a._count.stories)
    .slice(0, 8);

  return (
    <Layout>
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <div className="container mx-auto px-4 py-8">
          <div className="max-w-7xl mx-auto">
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
              {/* Main Content */}
              <div className="lg:col-span-3">
                {/* Header */}
                <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 mb-6">
                  <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
                    üìö Th·ªÉ Lo·∫°i Truy·ªán
                  </h1>
                  <p className="text-gray-600 dark:text-gray-300 mb-6">
                    Kh√°m ph√° kho t√†ng truy·ªán ƒëa d·∫°ng v·ªõi {genres.length} th·ªÉ
                    lo·∫°i phong ph√∫
                  </p>

                  {/* Search and Filter */}
                  <div className="flex flex-col sm:flex-row gap-4">
                    <div className="flex-1">
                      <input
                        type="text"
                        placeholder="üîç T√¨m ki·∫øm th·ªÉ lo·∫°i..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                    <select
                      value={sortBy}
                      onChange={(e) =>
                        setSortBy(e.target.value as "name" | "count")
                      }
                      className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="name">S·∫Øp x·∫øp theo t√™n</option>
                      <option value="count">S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng</option>
                    </select>
                  </div>
                </div>

                {/* Loading */}
                {loading && (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {[...Array(9)].map((_, i) => (
                      <div
                        key={i}
                        className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6 animate-pulse"
                      >
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center">
                            <div className="w-3 h-3 bg-gray-200 dark:bg-gray-700 rounded-full mr-3"></div>
                            <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-24"></div>
                          </div>
                          <div className="h-6 bg-gray-200 dark:bg-gray-700 rounded w-8"></div>
                        </div>
                        <div className="space-y-2">
                          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
                          <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}

                {/* Error */}
                {error && !loading && (
                  <div className="text-center py-12">
                    <div className="text-6xl mb-4">üòû</div>
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                      C√≥ l·ªói x·∫£y ra
                    </h3>
                    <p className="text-gray-600 dark:text-gray-400 mb-4">
                      {error}
                    </p>
                    <button
                      onClick={fetchGenres}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      Th·ª≠ l·∫°i
                    </button>
                  </div>
                )}

                {/* Genres Grid */}
                {!loading && !error && (
                  <>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                      {filteredAndSortedGenres.map((genre, index) => (
                        <div
                          key={genre.id}
                          onClick={() =>
                            router.push(`/stories?genre=${genre.slug}`)
                          }
                          className="bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 p-6 border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 cursor-pointer group transform hover:-translate-y-1"
                          style={{ animationDelay: `${index * 100}ms` }}
                        >
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center">
                              <div className="w-3 h-3 bg-blue-500 rounded-full mr-3 group-hover:bg-blue-600 transition-colors duration-300"></div>
                              <h3 className="text-xl font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">
                                {genre.name}
                              </h3>
                            </div>
                            <span className="bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 text-sm px-2 py-1 rounded-full">
                              {genre._count.stories}
                            </span>
                          </div>
                          <p className="text-gray-600 dark:text-gray-400 leading-relaxed">
                            {getGenreDescription(genre.name)}
                          </p>
                        </div>
                      ))}
                    </div>

                    {/* No Results */}
                    {filteredAndSortedGenres.length === 0 && searchTerm && (
                      <div className="text-center py-12">
                        <div className="text-6xl mb-4">üîç</div>
                        <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                          Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i
                        </h3>
                        <p className="text-gray-600 dark:text-gray-400">
                          Kh√¥ng c√≥ th·ªÉ lo·∫°i n√†o ph√π h·ª£p v·ªõi "{searchTerm}"
                        </p>
                      </div>
                    )}

                    {/* Popular Genres */}
                    {popularGenres.length > 0 && !searchTerm && (
                      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
                        <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4 text-center">
                          üåü Th·ªÉ Lo·∫°i Ph·ªï Bi·∫øn
                        </h2>
                        <div className="flex flex-wrap justify-center gap-3">
                          {popularGenres.map((genre) => (
                            <button
                              key={genre.id}
                              onClick={() =>
                                router.push(`/stories?genre=${genre.slug}`)
                              }
                              className="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full border border-gray-300 dark:border-gray-600 hover:bg-blue-50 dark:hover:bg-blue-900 hover:border-blue-300 dark:hover:border-blue-600 hover:text-blue-600 dark:hover:text-blue-400 transition-all"
                            >
                              {genre.name} ({genre._count.stories})
                            </button>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Call to Action */}
                    {!searchTerm && (
                      <div className="mt-8 text-center bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-8 text-white">
                        <h2 className="text-2xl md:text-3xl font-bold mb-4">
                          Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i y√™u th√≠ch?
                        </h2>
                        <p className="text-lg mb-6 opacity-90">
                          Kh√°m ph√° t·∫•t c·∫£ c√°c truy·ªán trong kho t√†ng c·ªßa ch√∫ng
                          t√¥i
                        </p>
                        <button
                          onClick={() => router.push("/stories")}
                          className="inline-block bg-white text-blue-600 font-semibold px-8 py-3 rounded-lg hover:bg-gray-100 transition-all duration-300 hover:scale-105 shadow-lg"
                        >
                          üìö Xem T·∫•t C·∫£ Truy·ªán
                        </button>
                      </div>
                    )}
                  </>
                )}
              </div>

              {/* Sidebar */}
              <div className="lg:col-span-1">
                <StorySidebar />
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}
