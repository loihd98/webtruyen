import React from "react";
import { Metadata } from "next";
import Link from "next/link";
import Layout from "../../components/layout/Layout";

// Server-side data fetching
async function getGenres() {
  try {
    const baseUrl =
      process.env.NEXT_PUBLIC_API_URL || "http://localhost:5000/api";
    const response = await fetch(`${baseUrl}/stories/genres`, {
      next: { revalidate: 3600 }, // ISR: revalidate every hour
    });

    if (!response.ok) {
      throw new Error("Failed to fetch genres");
    }

    const result = await response.json();
    return result.genres || [];
  } catch (error) {
    console.error("Error fetching genres:", error);
    return [];
  }
}

// Generate metadata for SEO
export const metadata: Metadata = {
  title: "Th·ªÉ Lo·∫°i Truy·ªán - Web Truy·ªán",
  description:
    "Kh√°m ph√° c√°c th·ªÉ lo·∫°i truy·ªán ƒëa d·∫°ng: Ti√™n Hi·ªáp, ƒê√¥ Th·ªã, Huy·ªÅn Huy·ªÖn, Ki·∫øm Hi·ªáp, Ng√¥n T√¨nh v√† nhi·ªÅu th·ªÉ lo·∫°i kh√°c.",
  openGraph: {
    title: "Th·ªÉ Lo·∫°i Truy·ªán - Web Truy·ªán",
    description:
      "Kh√°m ph√° c√°c th·ªÉ lo·∫°i truy·ªán ƒëa d·∫°ng: Ti√™n Hi·ªáp, ƒê√¥ Th·ªã, Huy·ªÅn Huy·ªÖn, Ki·∫øm Hi·ªáp, Ng√¥n T√¨nh v√† nhi·ªÅu th·ªÉ lo·∫°i kh√°c.",
    type: "website",
    locale: "vi_VN",
  },
  alternates: {
    canonical: "/genres",
  },
};

interface Genre {
  id: string;
  name: string;
  slug: string;
  _count: {
    stories: number;
  };
}

export default async function GenresPage() {
  const genres: Genre[] = (await getGenres()) || [];

  // Add default descriptions for genres if not provided by API
  const getGenreDescription = (genreName: string) => {
    const descriptions: { [key: string]: string } = {
      "Ti√™n Hi·ªáp":
        "Tu ti√™n, tu ch√¢n, tu th·∫ßn, c√°c c√¢u chuy·ªán v·ªÅ vi·ªác tu luy·ªán ƒë·ªÉ tr·ªü th√†nh ti√™n nh√¢n.",
      "ƒê√¥ Th·ªã":
        "C√¢u chuy·ªán hi·ªán ƒë·∫°i, ƒë·ªùi s·ªëng th√†nh th·ªã, t√¨nh y√™u v√† s·ª± nghi·ªáp trong x√£ h·ªôi hi·ªán t·∫°i.",
      "Huy·ªÅn Huy·ªÖn":
        "Th·∫ø gi·ªõi k·ª≥ ·∫£o, ph√©p thu·∫≠t, ma ph√°p v√† nh·ªØng cu·ªôc phi√™u l∆∞u kh√¥ng t∆∞·ªüng.",
      "Ki·∫øm Hi·ªáp":
        "V√µ l√¢m, giang h·ªì, ki·∫øm ph√°p v√† nh·ªØng c√¢u chuy·ªán anh h√πng h√†o ki·ªát.",
      "Ng√¥n T√¨nh":
        "T√¨nh y√™u l√£ng m·∫°n, c√¢u chuy·ªán t√¨nh c·∫£m ng·ªçt ng√†o v√† c·∫£m ƒë·ªông.",
      "Quan Tr∆∞·ªùng":
        "Ch√≠nh tr·ªã, quy·ªÅn l·ª±c, ƒë·∫•u tranh trong tri·ªÅu ƒë√¨nh v√† quan tr∆∞·ªùng.",
      "L·ªãch S·ª≠":
        "D·ª±a tr√™n s·ª± ki·ªán l·ªãch s·ª≠, nh√¢n v·∫≠t l·ªãch s·ª≠ v√† b·ªëi c·∫£nh th·ªùi ƒë·∫°i x∆∞a.",
      "Khoa Huy·ªÖn":
        "T∆∞∆°ng lai, c√¥ng ngh·ªá, v≈© tr·ª• v√† nh·ªØng c√¢u chuy·ªán vi·ªÖn t∆∞·ªüng.",
      "Trinh Th√°m": "Ph√° √°n, ƒëi·ªÅu tra, b√≠ ·∫©n v√† nh·ªØng c√¢u chuy·ªán h·ªìi h·ªôp.",
      "V√µng Du": "Game online, th·∫ø gi·ªõi ·∫£o v√† nh·ªØng cu·ªôc phi√™u l∆∞u trong game.",
    };
    return (
      descriptions[genreName] ||
      "Kh√°m ph√° nh·ªØng c√¢u chuy·ªán th√∫ v·ªã trong th·ªÉ lo·∫°i n√†y."
    );
  };

  return (
    <Layout>
      <div className="py-8">
        {/* Header */}
        <div className="text-center mb-12 animate-fade-in">
          <h1 className="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4 animate-slide-up">
            üè∑Ô∏è Th·ªÉ Lo·∫°i Truy·ªán
          </h1>
          <p className="text-lg text-gray-600 dark:text-gray-400 max-w-2xl mx-auto animate-slide-up animation-delay-200">
            Kh√°m ph√° c√°c th·ªÉ lo·∫°i truy·ªán ƒëa d·∫°ng v√† phong ph√∫. T√¨m ki·∫øm nh·ªØng
            c√¢u chuy·ªán ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n.
          </p>
        </div>

        {/* Genres Grid */}
        {genres.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
            {genres.map((genre: Genre, index: number) => (
              <Link
                key={genre.id}
                href={`/stories?genre=${encodeURIComponent(genre.slug)}`}
                className="group"
              >
                <div
                  className="bg-white dark:bg-gray-800 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 p-6 border border-gray-200 dark:border-gray-700 hover:border-blue-300 dark:hover:border-blue-600 animate-fade-in-scale hover:scale-105"
                  style={{ animationDelay: `${index * 100}ms` }}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center">
                      <div className="w-3 h-3 bg-blue-500 rounded-full mr-3 group-hover:bg-blue-600 transition-colors duration-300"></div>
                      <h3 className="text-xl font-semibold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-300">
                        {genre.name}
                      </h3>
                    </div>
                    <span className="bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 text-sm px-2 py-1 rounded-full">
                      {genre._count.stories}
                    </span>
                  </div>
                  <p className="text-gray-600 dark:text-gray-400 leading-relaxed">
                    {getGenreDescription(genre.name)}
                  </p>
                </div>
              </Link>
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="text-gray-400 text-6xl mb-4">üè∑Ô∏è</div>
            <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
              Ch∆∞a c√≥ th·ªÉ lo·∫°i n√†o
            </h2>
            <p className="text-gray-600 dark:text-gray-400 mb-8">
              H·ªá th·ªëng ƒëang c·∫≠p nh·∫≠t c√°c th·ªÉ lo·∫°i truy·ªán. Vui l√≤ng quay l·∫°i sau.
            </p>
          </div>
        )}

        {/* Call to Action */}
        <div className="text-center bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-8 text-white animate-slide-up animation-delay-500">
          <h2 className="text-2xl md:text-3xl font-bold mb-4">
            Kh√¥ng t√¨m th·∫•y th·ªÉ lo·∫°i y√™u th√≠ch?
          </h2>
          <p className="text-lg mb-6 opacity-90">
            Kh√°m ph√° t·∫•t c·∫£ c√°c truy·ªán trong kho t√†ng c·ªßa ch√∫ng t√¥i
          </p>
          <Link
            href="/stories"
            className="inline-block bg-white text-blue-600 font-semibold px-8 py-3 rounded-lg hover:bg-gray-100 transition-all duration-300 hover:scale-105 shadow-lg"
          >
            üìö Xem T·∫•t C·∫£ Truy·ªán
          </Link>
        </div>
      </div>
    </Layout>
  );
}
